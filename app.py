import streamlit as st
import tempfile
import matplotlib.pyplot as plt
from audio_processor import AudioProcessor
import config

# Initialize AudioProcessor with the appropriate device
processor = AudioProcessor(device=config.DEVICE)

# Configure the Streamlit page layout and title
st.set_page_config(page_title="Analyse Audio - Hetic Radio", layout="wide")
st.title("üéµ Analyse Audio - Fait par HeticSolutions pour Hetic Radio")

# Step 1: File upload
# Allow users to upload an MP3 or WAV file for analysis and cleaning
st.header("1Ô∏è‚É£ T√©l√©versez un fichier audio")
st.write("""
    Bienvenue dans notre outil d'analyse audio. T√©l√©versez un fichier au format MP3 ou WAV pour le 
    nettoyer et analyser sa qualit√© sonore.
""")
uploaded_file = st.file_uploader("Choisissez un fichier audio :", type=["mp3", "wav"])

if uploaded_file:
    st.info("üé§ Fichier audio t√©l√©vers√© avec succ√®s !")

    # Save the uploaded file temporarily for processing
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_input:
        temp_input.write(uploaded_file.read())
        input_audio_path = temp_input.name

    # Save cleaned audio to a temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_output:
        output_audio_path = temp_output.name

    # Step 2: Clean the audio using the AudioProcessor
    st.subheader("2Ô∏è‚É£ Nettoyage de l'audio")
    st.write("""
        Nous utilisons des technologies avanc√©es pour isoler la voix et r√©duire les bruits de fond. 
        Cela peut prendre quelques instants.
    """)
    with st.spinner("Nettoyage de l'audio en cours..."):
        original_signal, cleaned_signal, sample_rate = processor.clean_audio(
            input_audio_path, output_audio_path, config.LOW_CUTOFF, config.HIGH_CUTOFF
        )
    st.success("‚úÖ Nettoyage termin√© avec succ√®s !")

    # Step 3: Audio playback
    st.subheader("3Ô∏è‚É£ √âcoutez et comparez")
    col1, col2 = st.columns(2)
    with col1:
        st.write("üîä Audio original")
        st.audio(uploaded_file, format="audio/mp3")
    with col2:
        st.write("üéß Audio nettoy√©")
        st.audio(output_audio_path, format="audio/wav")

    # Step 4: Waveform visualization
    st.subheader("4Ô∏è‚É£ Visualisation des formes d'onde")
    st.write("""
        La forme d'onde montre les variations du son au fil du temps. Elle vous permet de visualiser
        la diff√©rence entre l'audio original et l'audio nettoy√©.
    """)
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(original_signal[0], label="Signal original", color='blue', alpha=0.5)
    ax.plot(cleaned_signal[0], label="Signal nettoy√©", color='orange', alpha=0.7)
    ax.set_title("Comparaison : Signal original vs Signal nettoy√©")
    ax.set_xlabel("Temps (√©chantillons)")
    ax.set_ylabel("Amplitude")
    ax.legend()
    st.pyplot(fig)

    # Step 5: Download the cleaned audio
    st.subheader("5Ô∏è‚É£ T√©l√©chargez l'audio nettoy√©")
    with open(output_audio_path, "rb") as f:
        st.download_button(
            label="üì• T√©l√©charger l'audio nettoy√©",
            data=f,
            file_name="audio_nettoye.wav",
            mime="audio/wav",
        )
else:
    # Display a message if no file is uploaded
    st.info("Veuillez t√©l√©verser un fichier audio pour commencer.")

# Footer with credits and branding
st.markdown(
    """
    ---
    **D√©velopp√© par HeticSolutions pour Hetic Radio** üéôÔ∏è
    """
)